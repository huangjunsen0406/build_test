name: Setup and Build for Windows and Linux

on:
  push:
    branches:
      - main

env:
  PYTHONIOENCODING: utf-8
  PYTHONUTF8: 1
  # 设置默认编码为UTF-8
  LC_ALL: C.UTF-8
  LANG: C.UTF-8

jobs:
  build-windows:
    runs-on: windows-latest
    steps:
      # 检出代码
      - name: 检出代码
        uses: actions/checkout@v4

      # 安装 Inno Setup
      - name: 安装 Inno Setup（通过 Chocolatey）
        run: choco install innosetup -y
        shell: powershell

      # 下载 ChineseSimplified.isl 文件
      - name: 下载中文语言文件
        run: |
          $languageDir = "C:\Program Files (x86)\Inno Setup 6\Languages"
          
          # 确保目录存在
          if (-not (Test-Path $languageDir)) {
            New-Item -ItemType Directory -Path $languageDir -Force
          }
          
          # 下载中文语言文件
          Invoke-WebRequest -Uri "https://raw.githubusercontent.com/jrsoftware/issrc/main/Files/Languages/Unofficial/ChineseSimplified.isl" -OutFile "$languageDir\ChineseSimplified.isl"
          
          Write-Host "已下载中文语言文件到 $languageDir\ChineseSimplified.isl"
          
          # 验证文件是否存在
          if (Test-Path "$languageDir\ChineseSimplified.isl") {
            Write-Host "文件下载成功！"
          } else {
            Write-Error "文件下载失败！"
            exit 1
          }
        shell: powershell

      # 查找 ISCC.exe 路径并更新 build.json
      - name: 查找 ISCC.exe 路径并更新 build.json
        run: |
          # 获取 ISCC 路径
          $isccPath = Get-Command ISCC.exe | Select-Object -ExpandProperty Source

          # 设置环境变量
          $envLine = "ISCC_PATH=$($isccPath -replace '`r','' -replace '`n','')"
          [System.IO.File]::AppendAllText($env:GITHUB_ENV, "$envLine`n", [System.Text.Encoding]::UTF8)

          # 读取 JSON 内容
          $jsonPath = "build.json"
          $json = Get-Content $jsonPath -Raw | ConvertFrom-Json

          # 设置新的 Inno Setup 路径
          $json.inno_setup_path = $isccPath

          # 写回 JSON 文件，使用不带 BOM 的 UTF-8
          $json | ConvertTo-Json -Depth 10 | Set-Content -Path $jsonPath -Encoding utf8

          Write-Host "已更新 build.json 中的 Inno Setup 路径为: $isccPath"
        shell: powershell

      # 安装 Miniconda 和 Conda
      - name: 安装 Miniconda 和 Conda
        uses: conda-incubator/setup-miniconda@v3
        with:
          python-version: "3.10"
          auto-update-conda: true
          auto-activate-base: false
          activate-environment: py-xiaozhi

      # 安装 Python 依赖（pip + conda + pyinstaller）
      - name: 安装 Python 依赖（pip + conda + pyinstaller）
        shell: bash -el {0}
        run: |
          conda activate py-xiaozhi
          
          # 安装依赖
          pip install -r requirements.txt -i https://mirrors.aliyun.com/pypi/simple

          pip uninstall numpy -y

          # 使用conda安装PyQt5和OpenCV
          conda install pyqt=5.15.10 opencv=4.10.0 -y
          
          # 安装 PyInstaller (使用特定版本)
          pip install pyinstaller==6.13.0 wmi -i https://mirrors.aliyun.com/pypi/simple
          
          # 安装 Opus 库
          pip install opuslib -i https://mirrors.aliyun.com/pypi/simple
          
          conda install numpy=1.24.3 -y

      # 创建与本地环境类似的目录结构
      - name: 创建工作目录结构
        run: |
          mkdir -p ../UnifyPy
          git clone https://github.com/huangjunsen0406/UnifyPy.git ../UnifyPy
        shell: bash

      # 运行 UnifyPy 构建项目，使用类似本地的路径结构
      - name: 运行 UnifyPy 构建项目
        shell: bash -el {0}
        run: |
          conda activate py-xiaozhi
          export PYTHONIOENCODING=utf-8
          export PYTHONUTF8=1
          export PYTHONUNBUFFERED=1  # 确保Python输出不被缓冲
          python -u ../UnifyPy/main.py . --config ./build.json  # 添加-u参数禁用输出缓冲

      # 重命名Windows安装程序为指定格式
      - name: 重命名Windows安装程序
        shell: powershell
        run: |
          # 读取版本号
          $jsonPath = "build.json"
          $json = Get-Content $jsonPath -Raw | ConvertFrom-Json
          $version = $json.version
          $name = $json.name
          
          # 创建installer目录（如果不存在）
          if (-not (Test-Path "installer")) {
            New-Item -ItemType Directory -Path "installer" -Force
          }
          
          # 查找安装程序文件
          $setupFiles = Get-ChildItem -Path "installer" -Filter "*setup.exe"
          
          if ($setupFiles.Count -gt 0) {
            foreach ($file in $setupFiles) {
              $newName = "${name}_${version}_x64-setup.exe"
              $newPath = Join-Path "installer" $newName
              
              # 重命名文件
              Move-Item -Path $file.FullName -Destination $newPath -Force
              Write-Host "已将安装程序重命名为: $newName"
            }
          } else {
            Write-Host "未找到安装程序文件"
          }

      # 只上传 Inno Setup 安装程序
      - name: 上传安装程序
        uses: actions/upload-artifact@v4
        with:
          name: windows-installer
          path: installer/

      # 上传调试信息 (在失败情况下也执行)
      - name: 上传调试信息
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: windows-debug-info
          path: |
            build.json
            dist/
            xiaozhi.spec
          continue-on-error: true

      # 检查构建结果
      - name: 检查构建结果
        if: always()
        shell: bash
        run: |
          echo "检查dist目录内容:"
          ls -la dist/ || echo "dist目录不存在"
          
          echo "检查installer目录内容:"
          ls -la installer/ || echo "installer目录不存在"
          
          echo "检查是否存在关键文件夹:"
          ls -la assets/ || echo "assets文件夹不存在"
          ls -la libs/ || echo "libs文件夹不存在"
          ls -la src/ || echo "src文件夹不存在"

  build-linux:
    runs-on: ubuntu-22.04
    strategy:
      fail-fast: false
      matrix:
        arch: [x64, arm64]
        include:
          - arch: x64
            platform: x86_64
            docker_image: ubuntu:22.04
            arch_name: amd64
            use_qemu: false
          - arch: arm64
            platform: aarch64
            docker_image: ubuntu:22.04
            arch_name: arm64
            use_qemu: true
            qemu_platform: arm64
    steps:
      - name: 检出代码
        uses: actions/checkout@v4

      - name: 设置 QEMU
        if: matrix.use_qemu
        uses: docker/setup-qemu-action@v3
        with:
          platforms: ${{ matrix.qemu_platform }}

      # 设置 Docker Buildx
      - name: 设置 Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      # 缓存 Docker 层
      - name: 缓存 Docker 层
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ matrix.arch }}-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-${{ matrix.arch }}-

      - name: 安装系统依赖 (仅x64)
        if: matrix.arch == 'x64'
        run: |
          sudo apt update
          sudo apt install -y build-essential python3-dev python3-pip python3-setuptools \
          libopenblas-dev liblapack-dev gfortran patchelf autoconf automake libtool \
          cmake libssl-dev libatlas-base-dev dpkg-dev \
          python3-pyaudio portaudio19-dev ffmpeg libopus0 libopus-dev pulseaudio-utils \
          xvfb x11-utils libx11-dev libxtst-dev libxkbcommon-x11-dev \
          libxcb-xinerama0 libxcb-icccm4 libxcb-image0 libxcb-keysyms1 \
          libxcb-randr0 libxcb-render-util0 libxcb-xkb1 libxkbcommon-x11-0 \
          meson ninja-build

      - name: 安装 Miniconda 和 Conda (仅x64)
        if: matrix.arch == 'x64'
        uses: conda-incubator/setup-miniconda@v3
        with:
          python-version: "3.10"
          auto-update-conda: true
          auto-activate-base: false
          activate-environment: py-xiaozhi

      - name: 安装 Python 依赖 (仅x64)
        if: matrix.arch == 'x64'
        shell: bash -el {0}
        run: |
          conda activate py-xiaozhi
          
          # 安装依赖
          pip install -r requirements.txt -i https://mirrors.aliyun.com/pypi/simple
          
          # 安装 meson 和 ninja
          pip install meson ninja -i https://mirrors.aliyun.com/pypi/simple

          pip uninstall numpy -y

          # 使用conda安装PyQt5和OpenCV
          conda install pyqt=5.15.10 opencv=4.10.0 -y
          
          # 安装 PyInstaller (使用特定版本)
          pip install pyinstaller==6.13.0 -i https://mirrors.aliyun.com/pypi/simple
          
          # 安装 Opus 库
          pip install opuslib -i https://mirrors.aliyun.com/pypi/simple
          
          # 安装 OpenBLAS 版本的 NumPy
          export BLAS=openblas
          export LAPACK=openblas
          export NPY_NUM_BUILD_JOBS=$(nproc)
          pip install numpy==1.24.3 --no-binary :all: -i https://mirrors.aliyun.com/pypi/simple

      - name: 创建工作目录结构 (仅x64)
        if: matrix.arch == 'x64'
        run: |
          mkdir -p ../UnifyPy
          git clone https://github.com/huangjunsen0406/UnifyPy.git ../UnifyPy
        shell: bash

      - name: 运行 UnifyPy 构建 Linux 项目 (仅x64)
        if: matrix.arch == 'x64'
        shell: bash -el {0}
        run: |
          conda activate py-xiaozhi
          export PYTHONIOENCODING=utf-8
          export PYTHONUTF8=1
          export PYTHONUNBUFFERED=1
          
          # 设置 Xvfb
          export DISPLAY=:99
          mkdir -p /tmp/.X11-unix
          sudo chmod 1777 /tmp/.X11-unix
          Xvfb :99 -screen 0 1024x768x24 -ac +extension GLX +render -noreset &
          sleep 3
          
          # 确保所有必要的目录存在
          mkdir -p models
          
          python -u ../UnifyPy/main.py . --config ./build.json

      - name: 创建 Docker 构建环境 (非x64)
        if: matrix.arch != 'x64'
        run: |
          cat > Dockerfile.${{ matrix.arch }} << EOF
          FROM --platform=linux/${{ matrix.qemu_platform }} ${{ matrix.docker_image }}
          
          ENV DEBIAN_FRONTEND=noninteractive
          ENV PYTHONIOENCODING=utf-8
          ENV PYTHONUTF8=1
          ENV LC_ALL=C.UTF-8
          ENV LANG=C.UTF-8
          ENV BLAS=openblas
          ENV LAPACK=openblas
          
          # 安装基本工具和依赖
          RUN apt-get update || (apt-get clean && apt-get update) \
              && apt-get install -y --no-install-recommends \
              build-essential \
              python3-dev \
              python3-pip \
              python3-setuptools \
              libopenblas-dev \
              liblapack-dev \
              gfortran \
              patchelf \
              autoconf \
              automake \
              libtool \
              cmake \
              libssl-dev \
              libatlas-base-dev \
              dpkg-dev \
              python3-pyaudio \
              portaudio19-dev \
              ffmpeg \
              libopus0 \
              libopus-dev \
              pulseaudio-utils \
              git \
              wget \
              ca-certificates \
              xvfb \
              x11-utils \
              libx11-dev \
              libxtst-dev \
              libxkbcommon-x11-dev \
              libxcb-xinerama0 \
              libxcb-icccm4 \
              libxcb-image0 \
              libxcb-keysyms1 \
              libxcb-randr0 \
              libxcb-render-util0 \
              libxcb-xkb1 \
              libxkbcommon-x11-0 \
              meson \
              ninja-build \
              && apt-get clean \
              && rm -rf /var/lib/apt/lists/*
          
          # 安装 Miniconda
          RUN wget -q -O Miniforge3.sh "https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-${{ matrix.platform }}.sh" \
              && bash Miniforge3.sh -b -p /opt/conda \
              && rm Miniforge3.sh
          
          ENV PATH="/opt/conda/bin:\${PATH}"
          
          # 创建工作目录
          WORKDIR /app
          
          # 复制项目文件
          COPY . /app/
          
          # 创建conda环境
          RUN conda create -n py-xiaozhi python=3.10 -y --no-verify
          
          # 设置shell
          SHELL ["/bin/bash", "-c"]
          
          # 安装依赖
          RUN source /opt/conda/bin/activate py-xiaozhi \
              && pip install -r requirements.txt -i https://mirrors.aliyun.com/pypi/simple \
              && pip install meson ninja -i https://mirrors.aliyun.com/pypi/simple \
              && pip uninstall numpy -y \
              && export BLAS=openblas \
              && export LAPACK=openblas \
              && export NPY_NUM_BUILD_JOBS=4 \
              && pip install numpy==1.24.3 --no-binary :all: -i https://mirrors.aliyun.com/pypi/simple \
              && conda install pyqt=5.15.10 opencv=4.10.0 -y \
              && pip install pyinstaller==6.13.0 opuslib -i https://mirrors.aliyun.com/pypi/simple
          
          # 克隆 UnifyPy
          RUN mkdir -p /UnifyPy \
              && git clone https://github.com/huangjunsen0406/UnifyPy.git /UnifyPy
          
          # 构建命令
          CMD source /opt/conda/bin/activate py-xiaozhi \
              && export PYTHONIOENCODING=utf-8 \
              && export PYTHONUTF8=1 \
              && export PYTHONUNBUFFERED=1 \
              && export DISPLAY=:99 \
              && mkdir -p /tmp/.X11-unix \
              && chmod 1777 /tmp/.X11-unix \
              && Xvfb :99 -screen 0 1024x768x24 -ac +extension GLX +render -noreset &> /dev/null & \
              && sleep 3 \
              && mkdir -p models \
              && python -u /UnifyPy/main.py . --config ./build.json
          EOF
          
          # 构建 Docker 镜像
          docker buildx build --platform linux/${{ matrix.qemu_platform }} --load --cache-from type=local,src=/tmp/.buildx-cache --cache-to type=local,dest=/tmp/.buildx-cache-new,mode=max -t xiaozhi-${{ matrix.arch }}-builder -f Dockerfile.${{ matrix.arch }} .
          
          # 运行构建
          docker run --platform linux/${{ matrix.qemu_platform }} --network=host --dns 8.8.8.8 --dns 8.8.4.4 --rm -v $(pwd):/app xiaozhi-${{ matrix.arch }}-builder
        shell: bash
        
      # 移动缓存
      - name: 移动缓存
        if: matrix.arch != 'x64'
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache
        shell: bash

      # 重命名Linux安装程序为指定格式
      - name: 重命名Linux安装程序
        shell: bash
        run: |
          # 读取版本号和名称
          VERSION=$(python -c "import json; print(json.load(open('build.json'))['version'])")
          NAME=$(python -c "import json; print(json.load(open('build.json'))['name'])")
          
          # 创建installer目录（如果不存在）
          mkdir -p installer
          
          # 列出重命名前的文件
          echo "重命名前的文件列表:"
          ls -la installer/ || echo "installer目录为空或不存在"
          
          # 检查installer目录是否有文件
          file_count=$(find installer -type f | wc -l)
          if [ "$file_count" -eq 0 ]; then
            echo "警告: installer目录中没有找到任何文件，跳过重命名步骤"
            exit 0
          fi
          
          # 查找并重命名DEB文件
          shopt -s nullglob  # 设置空匹配返回空列表而不是保留通配符
          for file in installer/*.deb; do
            if [ -f "$file" ]; then
              filename=$(basename "$file")
              target_name="${NAME}_${VERSION}_${{ matrix.arch_name }}.deb"
              
              # 检查文件名是否已经是目标格式
              if [ "$filename" != "$target_name" ]; then
                echo "重命名: $file -> installer/$target_name"
                cp "$file" "installer/$target_name" && rm "$file"
                echo "已将安装程序重命名为: $target_name"
              else
                echo "文件 $filename 已经是正确格式，无需重命名"
              fi
            fi
          done
          
          # 查找并重命名RPM文件
          for file in installer/*.rpm; do
            if [ -f "$file" ]; then
              filename=$(basename "$file")
              target_name="${NAME}_${VERSION}_${{ matrix.arch_name }}.rpm"
              
              # 检查文件名是否已经是目标格式
              if [ "$filename" != "$target_name" ]; then
                echo "重命名: $file -> installer/$target_name"
                cp "$file" "installer/$target_name" && rm "$file"
                echo "已将安装程序重命名为: $target_name"
              else
                echo "文件 $filename 已经是正确格式，无需重命名"
              fi
            fi
          done
          
          # 查找并重命名AppImage文件
          for file in installer/*.AppImage; do
            if [ -f "$file" ]; then
              filename=$(basename "$file")
              target_name="${NAME}_${VERSION}_${{ matrix.arch_name }}.AppImage"
              
              # 检查文件名是否已经是目标格式
              if [ "$filename" != "$target_name" ]; then
                echo "重命名: $file -> installer/$target_name"
                cp "$file" "installer/$target_name" && rm "$file"
                echo "已将安装程序重命名为: $target_name"
              else
                echo "文件 $filename 已经是正确格式，无需重命名"
              fi
            fi
          done
          shopt -u nullglob  # 恢复默认行为
          
          # 列出重命名后的文件
          echo "重命名后的文件列表:"
          ls -la installer/ || echo "installer目录为空或不存在"

      - name: 上传Linux安装程序
        uses: actions/upload-artifact@v4
        if: ${{ success() }}
        with:
          name: linux-${{ matrix.arch }}-installer
          path: installer/
          if-no-files-found: warn

      - name: 上传Linux调试信息
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: linux-${{ matrix.arch }}-debug-info
          path: |
            build.json
            dist/
            xiaozhi.spec
          continue-on-error: true